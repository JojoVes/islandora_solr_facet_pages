<?php

/**
 * @file
 * Various hook and function implementations.
 */

use Drupal\Component\Utility\Html;

use Drupal\islandora_solr\IslandoraSolrQueryProcessor;

/**
 * Implements hook_theme().
 */
function islandora_solr_facet_pages_theme() {
  return [
    'islandora_solr_facet_pages_wrapper' => [
      'template' => 'islandora-solr-facet-pages-wrapper',
      'variables' => [
        'letterer' => NULL,
        'results' => NULL,
        'pager' => NULL,
        'path' => NULL,
        'pager_data' => [],
        'search_form' => [],
      ],
    ],
    'islandora_solr_facet_pages_results' => [
      'template' => 'islandora-solr-facet-pages-results',
      'variables' => [
        'results' => [],
        'solr_field' => NULL,
        'path' => NULL,
      ],
    ],
    'islandora_solr_facet_pages_letterer' => [
      'file' => 'theme/islandora_solr_facet_pages.theme.inc',
      'function' => 'theme_islandora_solr_facet_pages_letterer',
      'variables' => [
        'facet_queries' => [],
        'fq_map' => [],
        'search_prefix' => NULL,
        'path' => NULL,
      ],
    ],
    'islandora_solr_facet_pages_admin_table' => [
      'function' => 'theme_islandora_solr_facet_pages_admin_table',
      'file' => 'islandora_solr_facet_pages.admin.inc',
      'render element' => 'form',
    ],
  ];
}

/**
 * Performs a solr query to get facets fields for the alphabetical pager.
 *
 * It makes use of facet queries.
 *
 * @param object $solr
 *   Apache_Solr_Service object to use for the facet query.
 * @param string $solr_field
 *   Solr field to use for the facet query.
 * @param string $search_term
 *   Term to search facets with.
 *
 * @return array
 *   An associative array with elements 'facet_queries' and 'fq_map'. Both
 *   arrays are used to theme the alphabetical pager.
 *   'fq_map' (filter query map) is an associative array which maps a filter
 *   query to a prefix, eg: 'solr_field:A*' => 'A'.
 *   'facet_queries' is an associative array which maps the filter query to the
 *   bucket size, eg: 'solr_field:A*' => 1234.
 */
function islandora_solr_facet_pages_build_letterer($solr, $solr_field, $search_term = NULL) {
  $solr_build = new IslandoraSolrQueryProcessor();
  $fq = [];
  $fq_map = [];
  foreach (range('A', 'Z') as $letter) {
    $value = "$solr_field:($letter* OR " . strtolower($letter) . "*)";
    $fq_map[$value] = $letter;
    $fq[] = $value;
  }

  // Set facet parameters.
  $params = [
    'facet' => 'true',
    'facet.field' => $solr_field,
    'facet.sort' => 'index',
    'facet.mincount' => 1,
    'facet.limit' => 0,
    'facet.query' => $fq,
    'hl' => 'false',
  ];
  $request_handler = \Drupal::config('islandora_solr.settings')->get('islandora_solr_request_handler');

  if ($request_handler) {
    $params['qt'] = $request_handler;
  }

  // Set query.
  $search_term = trim($search_term);
  if ($search_term) {
    $query = "$solr_field:($search_term)";
  }
  else {
    $query = "$solr_field:[* TO *]";
  }
  $solr_build->buildQuery($query, $params);
  // Because IslandoraSolrQueryProcessor stomps on our facet params.
  $solr_build->solrParams = array_replace_recursive($solr_build->solrParams, $params);
  try {
    $solr_build->executeQuery();
    // Facet queries.
    $facet_queries = $solr_build->islandoraSolrResult['facet_counts']['facet_queries'];
  }
  catch (Exception $e) {
    $facet_queries = new stdClass();
    drupal_set_message(Html::escape(t('Error searching Solr index')) . ' ' . $e->getMessage(), 'error', FALSE);
  }

  return [
    'facet_queries' => $facet_queries,
    'fq_map' => $fq_map,
  ];
}

/**
 * Performs a solr query to return facet_fields to populate the results page.
 *
 * @param object $solr
 *   Apache_Solr_Service object to use for the facet fields query.
 * @param string $solr_field
 *   Solr field to use for the facet fields query.
 * @param string $prefix
 *   Prefix from the URL to add to add a prefix to the facet query. This will
 *   limit the returned fields with fields that are prefixed with this value.
 * @param string $search_term
 *   Term to search facets with.
 *
 * @return array
 *   Returns an array of all the facet field values and the bucket size: eg:
 *   solr value => 123
 */
function islandora_solr_facet_pages_build_results($solr, $solr_field, $prefix, $search_term = NULL) {
  $solr_build = new IslandoraSolrQueryProcessor();
  // Get the actual results.
  $search_term = trim($search_term);
  if ($search_term) {
    $query = "$solr_field:($search_term)";
  }
  else {
    $query = "$solr_field:[* TO *]";
  }

  // Set facet parameters.
  $facet_params = [
    'facet' => 'true',
    'facet.field' => $solr_field,
    'facet.sort' => 'index',
    'facet.mincount' => 1,
    'facet.limit' => \Drupal::config('islandora_solr_facet_pages.settings')->get('islandora_solr_facet_pages_facet_limit'),
    'hl' => 'false',
  ];

  $request_handler = \Drupal::config('islandora_solr.settings')->get('islandora_solr_request_handler');
  if ($request_handler) {
    $facet_params['qt'] = $request_handler;
  }

  // Set the facet prefix.
  if ($prefix != t('ALL')) {
    $facet_params['facet.prefix'] = $prefix;
  }
  $solr_build->buildQuery($query, $facet_params);
  // Because the IslandoraSolrQueryProcessor stomps on our facet information.
  $solr_build->solrParams = array_replace_recursive($solr_build->solrParams, $facet_params);
  try {
    $solr_build->executeQuery();
    $fields = (array) $solr_build->islandoraSolrResult['facet_counts']['facet_fields'][$solr_field];
  }
  catch (Exception $e) {
    $fields = [];
    drupal_set_message(Html::escape(t('Error searching Solr index')) . ' ' . $e->getMessage(), 'error', FALSE);
  }

  return $fields;
}

/**
 * Prepares data to render the pager.
 *
 * @param array $result_fields
 *   An array containing all the results.
 *
 * @return array
 *   Returns an array containing values to configure and render the pager.
 *   Limit, offset and total.
 */
function islandora_solr_facet_pages_pager(array $result_fields = []) {
  // Set variables.
  $limit = \Drupal::config('islandora_solr_facet_pages.settings')->get('islandora_solr_facet_pages_limit');
  $offset = 0;
  $total = NULL;

  // Get URL parameters.
  $params = $_GET;
  unset($params['q']);

  // Get page limit.
  if (!empty($limit)) {
    $total = count($result_fields);
    $offset = isset($params['page']) ? $params['page'] * $limit : 0;
    pager_default_initialize($total, $limit);
  }

  return [
    'limit' => $limit,
    'offset' => $offset,
    'total' => $total,
  ];
}

/**
 * Access callback function.
 *
 * @param string $path
 *   Machine readable name passed in the url to decide what solr field to facet
 *   on.
 *
 * @return bool
 *   A boolean based on user access and valid path.
 */
function islandora_solr_facet_pages_access_callback($path = NULL) {
  $fields = \Drupal::config('islandora_solr_facet_pages.settings')->get('islandora_solr_facet_pages_fields_data');

  // Callback validation.
  foreach ($fields as $value) {
    // Check for allowed paths.
    if ($path == $value['path'] && \Drupal::currentUser()->hasPermission(ISLANDORA_VIEW_OBJECTS)) {
      return TRUE;
    }
  }

  return FALSE;
}
